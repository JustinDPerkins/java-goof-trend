name: Docker Image CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: java-goof
  IMAGE:VERSION: $(date +%s)

jobs:

  #build:

  #  runs-on: ubuntu-latest

   # steps:
   # - uses: actions/checkout@v2
   # - name: Build the Docker image
   #   run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_KEY }}" | docker login registry.hub.docker.com -u ${{ secrets.DOCKER_USERID }} --password-stdin

      - name: Push image
        run: |
          #IMAGE_ID=hub.docker.com/${{ secrets.DOCKER_USERID }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          #IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:$VERSION
